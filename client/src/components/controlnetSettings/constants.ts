import { TLayoutConfigs } from '@/types/componentTypes';

import { CheckboxInput, SelectInput, SliderInput } from '@/components';

const PREPROCESSOR_METHODS = {
    label: 'Препроцессор',
    data: [
        'none',
        'canny',
        'depth',
        'depth_leres',
        'depth_leres++',
        'depth_hand_refiner',
        'depth_anything',
        'hed',
        'hed_safe',
        'mediapipe_face',
        'mlsd',
        'normal_map',
        'openpose',
        'openpose_hand',
        'openpose_face',
        'openpose_faceonly',
        'openpose_full',
        'dw_openpose_full',
        'animal_openpose',
        'clip_vision',
        'revision_clipvision',
        'revision_ignore_prompt',
        'ip-adapter_clip_sd15',
        'ip-adapter_clip_sdxl_plus_vith',
        'ip-adapter_clip_sdxl',
        'ip-adapter_face_id',
        'ip-adapter_face_id_plus',
        'instant_id_face_keypoints',
        'instant_id_face_embedding',
        'color',
        'pidinet',
        'pidinet_safe',
        'pidinet_sketch',
        'pidinet_scribble',
        'scribble_xdog',
        'scribble_hed',
        'segmentation',
        'threshold',
        'depth_zoe',
        'normal_bae',
        'oneformer_coco',
        'oneformer_ade20k',
        'lineart',
        'lineart_coarse',
        'lineart_anime',
        'lineart_standard',
        'shuffle',
        'tile_resample',
        'invert',
        'lineart_anime_denoise',
        'reference_only',
        'reference_adain',
        'reference_adain+attn',
        'inpaint',
        'inpaint_only',
        'inpaint_only+lama',
        'tile_colorfix',
        'tile_colorfix+sharp',
        'recolor_luminance',
        'recolor_intensity',
        'blur_gaussian',
        'anime_face_segment',
        'densepose',
        'densepose_parula',
        'te_hed',
        'normal_dsine',
    ],
};

const CONTROLNET_MODELS = {
    label: 'Модель',
    data: [
        'control_canny-fp16 [e3fe7712]',
        'control_depth-fp16 [400750f6]',
        'control_hed-fp16 [13fee50b]',
        'control_mlsd-fp16 [e3705cfa]',
        'control_normal-fp16 [63f96f7c]',
        'control_openpose-fp16 [9ca67cc5]',
        'control_scribble-fp16 [c508311e]',
        'control_seg-fp16 [b9c1cc12]',
        'control_v11p_sd15_lineart [43d4be0d]',
    ],
};

export const CONTROLNET_TOGGLE_SETTINGS: TLayoutConfigs[] = [
    {
        component: CheckboxInput,
        props: {
            label: 'Использовать расшерение',
            data: true,
            fieldName: 'enabled',
            controlNet: true,
        },
        colSpan: 1,
    },
    {
        component: CheckboxInput,
        props: {
            label: 'Соблюдать контуры',
            data: true,
            fieldName: 'pixel_perfect',
            controlNet: true,
        },
        colSpan: 1,
    },
    {
        component: CheckboxInput,
        props: {
            label: 'Низкий VRAM',
            data: false,
            fieldName: 'lowvram',
            controlNet: true,
        },
        colSpan: 1,
    },
];

export const CONTROLNET_PARAMETER_SETTINGS: TLayoutConfigs[] = [
    {
        component: SelectInput,
        props: {
            label: PREPROCESSOR_METHODS.label,
            data: PREPROCESSOR_METHODS.data,
            fieldName: 'module',
            controlNet: true,
        },
        colSpan: 3,
    },
    {
        component: SelectInput,
        props: {
            label: CONTROLNET_MODELS.label,
            data: CONTROLNET_MODELS.data,
            fieldName: 'model',
            controlNet: true,
        },
        colSpan: 3,
    },
    {
        component: SliderInput,
        props: {
            fieldName: 'weight',
            fieldLabel: 'Контрольная масса',
            defaultValue: 1,
            max: 3,
            step: 1,
            controlNet: true,
        },
        colSpan: 2,
    },
    {
        component: SliderInput,
        props: {
            fieldName: 'guidance_start',
            fieldLabel: 'Начальный шаг контроля',
            defaultValue: 0,
            max: 1,
            step: 0.01,
            controlNet: true,
        },
        colSpan: 2,
    },
    {
        component: SliderInput,
        props: {
            fieldName: 'guidance_end',
            fieldLabel: 'Конечный шаг контроля',
            defaultValue: 1,
            max: 1,
            step: 0.01,
            controlNet: true,
        },
        colSpan: 2,
    },
];
